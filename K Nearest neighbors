import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(df.drop('TARGET CLASS',axis=1))    ##drop column to get features, target column
scaled_features = scaler.transform(df.drop(' ',axis=1))   ##same as last one
scaled_features

df_feat = pd.DataFrame(scaled_features,columns= [df.drop('columns' , 1)])    # drop column
df_feat.head()
from sklearn.cross_validation import train_test_split
X = df_feat
y=df['target column']    ##target column!
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET'], test_size=0.3)  ##target column!

from sklearn.neighbors import KNeighborsClassifier
--------------------------------------------------------------
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train,y_train)
pred = knn.predict(X_test)
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

Choice K:
error_rate = [ ]
for i in range(1,40):    
  knn = KNeighborsClassifier(n_neighbors=i)
  knn.fit(X_train,y_train)
  pred_i = knn.predict(X_test)
  error_rate.append(np.mean(pred_i != y_test))
plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate)
plt.xlabel('K')
plt.ylabel('Error Rate')
**k is x error is y    **pick high k and low error point  **redo knn = KNeighborsClassifier(n_neighbors=1) +++
