# check if there is null in table
df.isnull().sum()

# total missing data desc
total = train.isnull().sum().sort_values(ascending=False)
percent = (train.isnull().sum()/train.isnull().count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data

# drop cols
df.drop("Id", axis = 1, inplace = True)

# group by and count/median
a=df.groupby('columns').nunique()
a=df.groupby('columns').median()

# distinct count 
df['column'].value_counts()

#* find all variables in cols
n = df.select_dtypes(include=object)
for c in n.columns:
    print('{:<20}'.format(c), df[c].unique())

(n = train.select_dtypes(include=object)
for c in n.columns:
    print('{:<20}'.format(c), train[c].unique()))

# fill null value
df['column']= df['column'].fillna('S')

# get this col's median disregards null value
df.dropna(subset=['column']).median()     

# get dummies
pd.get_dummies(df ['Col'],drop_first=True)

# change datatype
df['col'] = df.col.astype(float)

# round entire table
df=df.round(decimals=2)

# cols to normalize
cols_to_norm = [ ' ', ' ']
df[cols_to_norm]=df[cols_to_norm].apply(lambda x: (x-x.min()) / (x.max()-x.min() )

# min, max, mean
print(train.describe(include=['number']).loc[['min','max','mean']].T.sort_values('max'))


# multi cols condition function
def newage(col):
    Age=col[0]
    Sex=col[1]
    Pclass=col[2]
    if pd.isnull(Age):
        if Sex=='male' and Pclass==1:
            return 37
        if Sex=='male' and Pclass==2:
            return 29
        if Sex=='male' and Pclass==3:
            return 24
        if Sex=='female' and Pclass==1:
            return 36
        if Sex=='female' and Pclass==2:
            return 29
        if Sex=='female' and Pclass==3:
            return 24
    else:
        return Age
        
train['newages']=train[['Age','Sex','Pclass']].apply(newage,axis=1)

# signle col condition function
def embarked(col):
    Embarked = col[0]
    if Embarked=='S':
        return 1
    if Embarked=='C':
        return 2
    if Embarked=='Q':
        return 3
        
train['newembark']=train[['Embarked']].apply(embarked,axis=1)


